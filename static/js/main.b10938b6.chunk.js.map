{"version":3,"sources":["features/transactions/transactionsSlice.js","features/budget/Budget.js","features/budget/BudgetNavbar.js","features/budget/TransactionForm.js","features/budget/HomeBudget.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["transactionsSlice","createSlice","name","initialState","entries","reducers","updateTransactions","state","action","payload","addTransaction","push","removeTransaction","splice","actions","selectEntries","transactions","selectCategoryList","map","e","category","filter","v","i","a","indexOf","Budget","data","useTranslation","t","transactionsData","i18n","useSelector","dispatch","useDispatch","readTitles","Object","keys","key","readValues","transaction","values","property","readRow","className","onClick","index","remove","length","BudgetNavbar","props","useState","fileName","setFileName","getLanguageToChange","language","addNewTransaction","label","cssClass","cssInputClass","cssLabelClass","parserOptions","header","dynamicTyping","skipEmptyLines","transformHeader","toLowerCase","replace","onFileLoaded","fileInfo","filename","changeLanguage","TransactionForm","categoryList","useForm","reValidateMode","handleSubmit","register","errors","useEffect","bulmaCalendar","attach","displayMode","showFooter","showHeader","color","showClearButton","startDate","Date","dateFormat","lang","forEach","calendar","on","date","console","log","element","document","querySelector","datepicker","isOpen","hide","onClose","onSubmit","formData","creation_date","toString","aria-label","id","ref","type","value","required","amount","placeholder","validate","parseFloat","readOnly","HomeBudget","transactionFormOpen","setTransactionFormOpen","App","configureStore","reducer","transactionsReducer","Boolean","window","location","hostname","match","i18next","init","interpolation","escapeValue","lng","resources","pl","common","common_pl","en","common_en","ReactDOM","render","StrictMode","I18nextProvider","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b10938b6.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const transactionsSlice = createSlice({\r\n  name: 'transactions',\r\n  initialState: {\r\n    entries: [],\r\n  },\r\n  reducers: {\r\n    updateTransactions: (state, action) => {\r\n      state.entries = action.payload;\r\n    },\r\n    addTransaction: (state, action) => {\r\n      state.entries.push(action.payload);\r\n    },\r\n    removeTransaction: (state, action) => {\r\n      if(action.payload !== -1) {\r\n        state.entries.splice(action.payload, 1);\r\n      }\r\n    }\r\n  },\r\n});\r\n\r\nexport const { updateTransactions, addTransaction, removeTransaction } = transactionsSlice.actions;\r\n\r\nexport const selectEntries = state => state.transactions.entries;\r\n\r\nexport const selectCategoryList = state => {\r\n  return state.transactions.entries.map(e => e.category).filter((v, i, a) => a.indexOf(v) === i);\r\n}\r\n\r\nexport default transactionsSlice.reducer;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectEntries, removeTransaction } from '../transactions/transactionsSlice';\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport function Budget() {\r\n    const {t, i18n} = useTranslation('common');\r\n    const transactionsData = useSelector(selectEntries);\r\n    const dispatch = useDispatch();\r\n\r\n    const readTitles = (data) => {\r\n        return (\r\n            <tr>\r\n                {Object.keys(data).map((key) => {return key != \"creation_date\" ? <th key={key} >{t('transactions.' + key)}</th> : ''})}\r\n                <th key=\"options\" >{t('transactions.options')}</th>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    const readValues = (transaction) => {\r\n        const values = [];\r\n        for (const property in transaction) {\r\n            if(property !== \"creation_date\"){\r\n                if(property === \"type\") {\r\n                    values.push(<td key={property}>{transaction[property] === \"-\" ? t('transactions.types.expense') : t('transactions.types.income')}</td>);\r\n                } else {\r\n                    values.push(<td key={property}>{transaction[property]}</td>);\r\n                }\r\n            }\r\n        }\r\n        return values;\r\n    }\r\n\r\n    const readRow = (data) => {\r\n        const remove = (transaction) => {\r\n            const index = data.indexOf(transaction);\r\n            if(index !== -1) {\r\n              dispatch(removeTransaction(index))\r\n            }\r\n        }\r\n        return data.map((transaction) => {\r\n            return (\r\n            <tr>\r\n                {readValues(transaction)}\r\n                <td key=\"options\">\r\n                    <button className=\"button is-danger\" onClick={() => remove(transaction)}>\r\n                        <i className=\"fas fa-trash\"></i>\r\n                    </button>\r\n                </td>\r\n            </tr>);\r\n        })\r\n    }\r\n\r\n    const createTable = (data) => {\r\n        return (\r\n            <table className=\"table is-bordered is-striped is-narrow is-hoverable is-fullwidth\">\r\n                <thead>\r\n                    {readTitles(data[0])}\r\n                </thead>\r\n                <tbody>\r\n                    {readRow(data)}\r\n                </tbody>\r\n            </table>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {(transactionsData.length > 0) && createTable(transactionsData)}\r\n        </div>\r\n        \r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport CSVReader from 'react-csv-reader'\r\nimport { updateTransactions, selectEntries } from '../transactions/transactionsSlice';\r\nimport { CSVLink } from \"react-csv\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport function BudgetNavbar(props) {\r\n    const {t, i18n} = useTranslation('common');\r\n    const dispatch = useDispatch();\r\n    const transactions = useSelector(selectEntries);\r\n    const [fileName, setFileName] = useState('');\r\n\r\n    const parseOptions = {\r\n        header: true,\r\n        dynamicTyping: true,\r\n        skipEmptyLines: true,\r\n        transformHeader: header =>\r\n          header\r\n            .toLowerCase()\r\n            .replace(/\\W/g, '_')\r\n    }\r\n\r\n    const onTransactionsFileLoaded = (data, fileInfo) => {\r\n        dispatch(updateTransactions(data));\r\n        setFileName(fileInfo['name']);\r\n    }\r\n\r\n    const clearTransactionsData = () => {\r\n        dispatch(updateTransactions([]));\r\n        setFileName('');\r\n    }\r\n\r\n    const getLanguageToChange = () => {\r\n        return i18n.language === \"en\" ? \"pl\" : \"en\";\r\n    }\r\n\r\n    const addNewTransaction = () => {\r\n        props.addNewTransaction();\r\n    }\r\n\r\n    return (\r\n        <nav className=\"level navbar container is-fluid\">\r\n            <div className=\"level-left\">\r\n                <p className=\"title\">{t('app.title')}</p>\r\n            </div>\r\n            <div className=\"level-right\">\r\n                <div className=\"level-item\">\r\n                    <button className=\"button is-info is-light\" onClick={addNewTransaction}>{t('buttons.new_transaction')}</button>\r\n                </div>\r\n                <div className=\"level-item\">\r\n                        <CSVReader \r\n                            label={fileName ? fileName : t('buttons.select_csv_file')}\r\n                            cssClass=\"button is-primary is-light\"\r\n                            cssInputClass=\"file-input\"\r\n                            cssLabelClass=\"file-label\"\r\n                            parserOptions={parseOptions} \r\n                            onFileLoaded={onTransactionsFileLoaded} \r\n                        />\r\n                </div>\r\n                <div className=\"level-item\">\r\n                    <CSVLink filename={\"home-budget.csv\"} className=\"button is-success is-light\" data={transactions}>\r\n                        <span className=\"icon is-small\">\r\n                            <i className=\"fas fa-check\"></i>\r\n                        </span>\r\n                        <span>\r\n                            {t('buttons.save')}\r\n                        </span>\r\n                    </CSVLink>\r\n                </div>\r\n                <div className=\"level-item\">\r\n                    <button className=\"button is-danger is-light\" onClick={clearTransactionsData}>{t('buttons.clear')}</button>\r\n                </div>\r\n                <div className=\"level-item\">\r\n                    <button className=\"button is-dark is-inverted\" onClick={() => i18n.changeLanguage(getLanguageToChange())}>{getLanguageToChange()}</button>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport bulmaCalendar from 'bulma-calendar/dist/js/bulma-calendar.min';\r\nimport { useForm } from \"react-hook-form\";\r\nimport './TransactionForm.scss';\r\nimport { addTransaction, selectCategoryList } from '../transactions/transactionsSlice';\r\n\r\nexport function TransactionForm(props) {\r\n    const {t, i18n} = useTranslation('common');\r\n\r\n    const dispatch = useDispatch();\r\n    const categoryList = useSelector(selectCategoryList);\r\n\r\n    const { handleSubmit, register, errors } = useForm({\r\n        reValidateMode: 'onChange'\r\n    });\r\n    const onSubmit = values => {\r\n        const formData = {\r\n            creation_date: new Date().toString(),\r\n            ...values\r\n        }\r\n        console.log(\"formData\", formData)\r\n        dispatch(addTransaction(formData));\r\n    }\r\n\r\n    useEffect(() => {\r\n        const calendars = bulmaCalendar.attach('[type=\"date\"]', {\r\n            displayMode: 'dialog',\r\n            showFooter: false,\r\n            showHeader: false,\r\n            color: \"info\",\r\n            showClearButton: false,\r\n            startDate: new Date(),\r\n            dateFormat: \"DD/MM/YYYY\",\r\n            lang: i18n.language\r\n        });\r\n    \r\n        calendars.forEach((calendar) => {\r\n          calendar.on('select', (date) => {\r\n            console.log(\"date\", date);\r\n          });\r\n        });\r\n    \r\n        const element = document.querySelector('#transaction-date');\r\n        if (element) {\r\n          element.bulmaCalendar.on('select', (datepicker) => {\r\n            console.log(\"datepicker\", datepicker.data.isOpen());\r\n            datepicker.data.hide();\r\n          });\r\n        }\r\n      }, []);\r\n\r\n    const renderCategoryList = () => {\r\n        if(categoryList.length > 0) {\r\n            return(\r\n                <div className=\"select is-info\">\r\n                    <select name=\"category\" ref={register}>\r\n                        {categoryList.map(category => <option value={category}>{category}</option>)}\r\n                    </select>\r\n                </div>\r\n            )\r\n        } else {\r\n            return(\r\n                <div className=\"control\">\r\n                    <input name=\"category\" \r\n                        ref={register({\r\n                            required: \"Required\"\r\n                        })} \r\n                        className={\"input \" + (errors.amount && \"is-danger\")}\r\n                        type=\"text\" \r\n                        placeholder=\"Category\"/>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal is-active\">\r\n            <div className=\"modal-background\" onClick={() => props.onClose()}></div>\r\n            <form className=\"modal-card\" onSubmit={handleSubmit(onSubmit)}>\r\n                <header className=\"modal-card-head\">\r\n                    <p className=\"modal-card-title\">{t('buttons.new_transaction')}</p>\r\n                    <button className=\"delete\" aria-label=\"close\" onClick={() => props.onClose()}></button>\r\n                </header>\r\n                <section className=\"modal-card-body\">\r\n                    <div className=\"field is-horizontal\">\r\n                        <div className=\"field-label\">\r\n                            <label className=\"label\">{t('transactions.date')}</label>\r\n                        </div>\r\n                        <div className=\"field-body\">\r\n                            <div className=\"field\">\r\n                                <div className=\"control\">\r\n                                    <input id=\"transaction-date\" name=\"date\" ref={register} className=\"input\" type=\"date\"/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"field is-horizontal\">\r\n                        <div className=\"field-label\">\r\n                            <label className=\"label\">{t('transactions.type')}</label>\r\n                        </div>\r\n                        <div className=\"field-body\">\r\n                            <div className=\"field\">\r\n                                <div className=\"select is-info\">\r\n                                    <select name=\"type\" ref={register}>\r\n                                        <option value=\"-\">{t('transactions.types.expense')}</option>\r\n                                        <option value=\"+\">{t('transactions.types.income')}</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"field is-horizontal\">\r\n                        <div className=\"field-label\">\r\n                            <label className=\"label\">{t('transactions.category')}</label>\r\n                        </div>\r\n                        <div className=\"field-body\">\r\n                            <div className=\"field\">\r\n                                {renderCategoryList()}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"field is-horizontal\">\r\n                        <div className=\"field-label\">\r\n                            <label className=\"label\">{t('transactions.amount')}</label>\r\n                        </div>\r\n                        <div className=\"field-body\">\r\n                            <div className=\"field has-addons\">\r\n                                <div className=\"control\">\r\n                                    <input name=\"amount\" \r\n                                        ref={register({\r\n                                            required: \"Required\",\r\n                                            validate: value => parseFloat(value) > 0 || \"Nice try!\"\r\n                                        })} \r\n                                        className={\"input \" + (errors.amount && \"is-danger\")}\r\n                                        type=\"text\" \r\n                                        placeholder=\"0\"/>\r\n                                </div>\r\n                                <div className=\"control\">\r\n                                    <input name=\"currency\" ref={register} placeholder=\"PLN\" className=\"button is-static\" value=\"PLN\" readOnly/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"field is-horizontal\">\r\n                        <div className=\"field-label\">\r\n                            <label className=\"label\">{t('transactions.constant')}</label>\r\n                        </div>\r\n                        <div className=\"field-body\">\r\n                            <div className=\"field\">\r\n                                <div className=\"control\">\r\n                                    <input name=\"constant\" ref={register} type=\"checkbox\"/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"field is-horizontal\">\r\n                        <div className=\"field-label\">\r\n                            <label className=\"label\">{t('transactions.period')}</label>\r\n                        </div>\r\n                        <div className=\"field-body\">\r\n                            <div className=\"field\">\r\n                                <div className=\"select is-info\">\r\n                                    <select name=\"period\" ref={register}>\r\n                                        <option value=\"month\">{t('transactions.periods.month')}</option>\r\n                                        <option value=\"day\">{t('transactions.periods.day')}</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"field is-horizontal\">\r\n                        <div className=\"field-label\">\r\n                            <label className=\"label\">{t('transactions.unexpected')}</label>\r\n                        </div>\r\n                        <div className=\"field-body\">\r\n                            <div className=\"field\">\r\n                                <div className=\"control\">\r\n                                    <input name=\"unexpected\" ref={register} type=\"checkbox\"/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"field is-horizontal\">\r\n                        <div className=\"field-label\">\r\n                            <label className=\"label\">{t('transactions.comment')}</label>\r\n                        </div>\r\n                        <div className=\"field-body\">\r\n                            <div className=\"field\">\r\n                            <div className=\"control\">\r\n                                <textarea name=\"comment\" ref={register} className=\"textarea\" placeholder={t('transactions.comment')}></textarea>\r\n                            </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <footer className=\"modal-card-foot\">\r\n                    <button type=\"submit\" className=\"button is-success\">{t(\"buttons.save\")}</button>\r\n                    <button className=\"button\" onClick={() => props.onClose()}>{t(\"buttons.cancel\")}</button>\r\n                </footer>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { Budget } from './Budget';\r\nimport { BudgetNavbar } from './BudgetNavbar';\r\nimport { TransactionForm } from './TransactionForm';\r\n\r\nexport function HomeBudget() {\r\n    const [transactionFormOpen, setTransactionFormOpen] = useState(false);\r\n\r\n    return (\r\n        <div>\r\n            <BudgetNavbar addNewTransaction={() => setTransactionFormOpen(true)} />\r\n            <Budget />\r\n            {transactionFormOpen ? <TransactionForm onClose={() => setTransactionFormOpen(false)} /> : ''}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './App.scss';\r\nimport 'react-bulma-components/dist/react-bulma-components.min.css';\r\nimport \"bulma-calendar/dist/css/bulma-calendar.min.css\"\r\nimport { HomeBudget } from './features/budget/HomeBudget'\r\n\r\nfunction App() {\r\n  return (\r\n    <section className=\"\">\r\n      <HomeBudget />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport transactionsReducer from '../features/transactions/transactionsSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    transactions: transactionsReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {I18nextProvider} from \"react-i18next\";\r\nimport i18next from \"i18next\";\r\nimport common_pl from \"./translations/pl/common.json\";\r\nimport common_en from \"./translations/en/common.json\";\r\n\r\ni18next.init({\r\n    interpolation: { escapeValue: false },\r\n    lng: 'pl',                              \r\n    resources: {\r\n        pl: {\r\n            common: common_pl              \r\n        },\r\n        en: {\r\n            common: common_en\r\n        }\r\n    },\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <I18nextProvider i18n={i18next}>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </I18nextProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}