{"version":3,"sources":["features/transactions/transactionsSlice.js","features/budget/Budget.js","features/budget/BudgetNavbar.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["transactionsSlice","createSlice","name","initialState","entries","reducers","updateTransactions","state","action","payload","actions","selectEntries","transactions","Budget","data","useTranslation","t","transactionsData","i18n","useSelector","readTitles","Object","keys","map","key","readValues","transaction","values","property","push","readRow","length","className","BudgetNavbar","dispatch","useDispatch","useState","fileName","setFileName","getLanguageToChange","language","label","cssClass","cssInputClass","cssLabelClass","parserOptions","header","dynamicTyping","skipEmptyLines","transformHeader","toLowerCase","replace","onFileLoaded","fileInfo","filename","onClick","changeLanguage","App","configureStore","reducer","transactionsReducer","Boolean","window","location","hostname","match","i18next","init","interpolation","escapeValue","lng","resources","pl","common","common_pl","en","common_en","ReactDOM","render","StrictMode","I18nextProvider","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.555bb4ea.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const transactionsSlice = createSlice({\r\n  name: 'transactions',\r\n  initialState: {\r\n    entries: [],\r\n  },\r\n  reducers: {\r\n    updateTransactions: (state, action) => {\r\n      state.entries = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { updateTransactions } = transactionsSlice.actions;\r\n\r\nexport const selectEntries = state => state.transactions.entries;\r\n\r\nexport default transactionsSlice.reducer;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectEntries } from '../transactions/transactionsSlice';\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport function Budget() {\r\n    const {t, i18n} = useTranslation('common');\r\n    const transactionsData = useSelector(selectEntries);\r\n\r\n    const readTitles = (data) => {\r\n        return (<tr>{Object.keys(data).map((key) => <th key={key} >{t('transactions.' + key)}</th>)}</tr>)\r\n    }\r\n\r\n    const readValues = (transaction) => {\r\n        const values = [];\r\n        for (const property in transaction) {\r\n            values.push(<td key={property}>{transaction[property]}</td>);\r\n        }\r\n        return values;\r\n    }\r\n\r\n    const readRow = (data) => {\r\n        return data.map((transaction) => {\r\n            return (<tr>{readValues(transaction)}</tr>);\r\n        })\r\n    }\r\n\r\n    const createTable = (data) => {\r\n        return (\r\n            <table className=\"table is-bordered is-striped is-narrow is-hoverable is-fullwidth\">\r\n                <thead>\r\n                    {readTitles(data[0])}\r\n                </thead>\r\n                <tbody>\r\n                    {readRow(data)}\r\n                </tbody>\r\n            </table>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {(transactionsData.length > 0) && createTable(transactionsData)}\r\n        </div>\r\n        \r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport CSVReader from 'react-csv-reader'\r\nimport { updateTransactions, selectEntries } from '../transactions/transactionsSlice';\r\nimport { CSVLink } from \"react-csv\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport function BudgetNavbar() {\r\n    const {t, i18n} = useTranslation('common');\r\n    const dispatch = useDispatch();\r\n    const transactions = useSelector(selectEntries);\r\n    const [fileName, setFileName] = useState('');\r\n\r\n    const parseOptions = {\r\n        header: true,\r\n        dynamicTyping: true,\r\n        skipEmptyLines: true,\r\n        transformHeader: header =>\r\n          header\r\n            .toLowerCase()\r\n            .replace(/\\W/g, '_')\r\n    }\r\n\r\n    const onTransactionsFileLoaded = (data, fileInfo) => {\r\n        dispatch(updateTransactions(data));\r\n        setFileName(fileInfo['name']);\r\n    }\r\n\r\n    const clearTransactionsData = () => {\r\n        dispatch(updateTransactions([]));\r\n        setFileName('');\r\n    }\r\n\r\n    const getLanguageToChange = () => {\r\n        return i18n.language === \"en\" ? \"pl\" : \"en\";\r\n    }\r\n\r\n    return (\r\n        <nav className=\"level navbar container is-fluid\">\r\n            <div className=\"level-left\">\r\n                <p className=\"title\">{t('app.title')}</p>\r\n            </div>\r\n            <div className=\"level-right\">\r\n                <div className=\"level-item\">\r\n                    <p className=\"subtitle\">{fileName}</p>\r\n                </div>\r\n                <div className=\"level-item\">\r\n                        <CSVReader \r\n                            label={t('buttons.select_csv_file')}\r\n                            cssClass=\"button is-primary\"\r\n                            cssInputClass=\"file-input\"\r\n                            cssLabelClass=\"file-label\"\r\n                            parserOptions={parseOptions} \r\n                            onFileLoaded={onTransactionsFileLoaded} \r\n                        />\r\n                </div>\r\n                <div className=\"level-item\">\r\n                    <CSVLink filename={\"home-budget.csv\"} className=\"button is-success\" data={transactions}>{t('buttons.save')}</CSVLink>\r\n                </div>\r\n                <div className=\"level-item\">\r\n                    <button className=\"button is-danger\" onClick={clearTransactionsData}>{t('buttons.clear')}</button>\r\n                </div>\r\n                <div className=\"level-item\">\r\n                    <button className=\"button is-dark\" onClick={() => i18n.changeLanguage(getLanguageToChange())}>{getLanguageToChange()}</button>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport 'react-bulma-components/dist/react-bulma-components.min.css';\r\nimport { Budget } from './features/budget/Budget';\r\nimport { BudgetNavbar } from './features/budget/BudgetNavbar';\r\n\r\nfunction App() {\r\n  return (\r\n    <section className=\"\">\r\n        <BudgetNavbar />\r\n        <Budget />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport transactionsReducer from '../features/transactions/transactionsSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    transactions: transactionsReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {I18nextProvider} from \"react-i18next\";\r\nimport i18next from \"i18next\";\r\nimport common_pl from \"./translations/pl/common.json\";\r\nimport common_en from \"./translations/en/common.json\";\r\n\r\ni18next.init({\r\n    interpolation: { escapeValue: false },\r\n    lng: 'pl',                              \r\n    resources: {\r\n        pl: {\r\n            common: common_pl              \r\n        },\r\n        en: {\r\n            common: common_en\r\n        }\r\n    },\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <I18nextProvider i18n={i18next}>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </I18nextProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}