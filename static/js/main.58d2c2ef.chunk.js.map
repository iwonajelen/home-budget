{"version":3,"sources":["features/transactions/transactionsSlice.js","features/transactions/transactionModel.js","features/budget/Budget.js","features/budget/BudgetNavbar.js","features/budget/TransactionForm.js","features/budget/HomeBudget.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["transactionsSlice","createSlice","name","initialState","entries","reducers","updateTransactions","state","action","payload","addTransaction","push","removeTransaction","splice","editTransaction","index","transaction","actions","selectEntries","transactions","selectCategoryList","map","e","category","filter","v","i","a","indexOf","TransactionProperties","CREATION_DATE","DATE","TYPE","CATEGORY","AMOUNT","CURRENCY","CONSTANT","PERIOD","COMMENT","UNEXPECTED","TransactionEntity","values","isCustomCategory","this","amount","comment","constant","date","currency","period","type","unexpected","otherCategory","Budget","props","data","useTranslation","t","dispatch","i18n","useDispatch","getTitles","Object","value","readTitle","readValues","getValue","property","toLowerCase","readRow","edit","onClick","className","remove","length","BudgetNavbar","useState","fileName","setFileName","getLanguageToChange","language","addNewTransaction","label","cssClass","cssInputClass","cssLabelClass","parserOptions","header","dynamicTyping","skipEmptyLines","transformHeader","replace","onFileLoaded","fileInfo","filename","changeLanguage","TransactionForm","setIsCustomCategory","categoryList","useSelector","useForm","mode","reValidateMode","defaultValues","handleSubmit","register","errors","getValues","useEffect","bulmaCalendar","attach","displayMode","showFooter","showHeader","color","showClearButton","startDate","Date","dateFormat","lang","forEach","calendar","on","element","document","querySelector","datepicker","hide","categoryOptionsChanged","target","selectedIndex","onClose","onSubmit","entity","setBasedOnFormData","isEdit","indexOfTransaction","formData","creation_date","toString","aria-label","id","ref","categoryListOptions","onChange","placeholder","required","renderCategoryList","validate","parseFloat","readOnly","HomeBudget","transactionFormOpen","setTransactionFormOpen","editedTransaction","setEditedTransaction","showTransactionForm","App","configureStore","reducer","transactionsReducer","Boolean","window","location","hostname","match","i18next","init","interpolation","escapeValue","lng","resources","pl","common","common_pl","en","common_en","ReactDOM","render","StrictMode","I18nextProvider","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58d2c2ef.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const transactionsSlice = createSlice({\r\n  name: 'transactions',\r\n  initialState: {\r\n    entries: [],\r\n  },\r\n  reducers: {\r\n    updateTransactions: (state, action) => {\r\n      state.entries = action.payload;\r\n    },\r\n    addTransaction: (state, action) => {\r\n      state.entries.push(action.payload);\r\n    },\r\n    removeTransaction: (state, action) => {\r\n      if(action.payload !== -1) {\r\n        state.entries.splice(action.payload, 1);\r\n      }\r\n    },\r\n    editTransaction: (state, action) => {\r\n      state.entries[action.payload.index] = {...action.payload.transaction};\r\n    }\r\n  },\r\n});\r\n\r\nexport const { updateTransactions, addTransaction, editTransaction, removeTransaction } = transactionsSlice.actions;\r\n\r\nexport const selectEntries = state => state.transactions.entries;\r\n\r\nexport const selectCategoryList = state => {\r\n  return state.transactions.entries.map(e => e.category).filter((v, i, a) => a.indexOf(v) === i);\r\n}\r\n\r\nexport default transactionsSlice.reducer;\r\n","export const TransactionProperties = {\r\n    CREATION_DATE: \"creation_date\",\r\n    DATE: \"date\",\r\n    TYPE: \"type\",\r\n    CATEGORY: \"category\",\r\n    AMOUNT: \"amount\",\r\n    CURRENCY: \"currency\",\r\n    CONSTANT: \"constant\",\r\n    PERIOD: \"period\",\r\n    COMMENT: \"comment\",\r\n    UNEXPECTED: \"unexpected\"\r\n}\r\n\r\nexport class TransactionEntity {\r\n    creation_date;\r\n    date;\r\n    type;\r\n    category;\r\n    amount;\r\n    currency;\r\n    constant;\r\n    period;\r\n    comment;\r\n    unexpected;\r\n\r\n    setBasedOnFormData(values, isCustomCategory) {\r\n        this.amount = values.amount;\r\n        this.comment = values.comment;\r\n        this.constant = values.constant;\r\n        this.date = values.date;\r\n        this.currency = values.currency;\r\n        this.period = values.period;\r\n        this.type = values.type;\r\n        this.unexpected = values.unexpected;\r\n        this.category = isCustomCategory ? values.otherCategory : values.category;\r\n    }\r\n}","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { removeTransaction } from '../transactions/transactionsSlice';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { TransactionProperties } from \"../transactions/transactionModel\";\r\n\r\nexport function Budget(props) {\r\n    const {t, i18n} = useTranslation('common');\r\n    const dispatch = useDispatch();\r\n\r\n    const getTitles = () => {\r\n        const readTitle = (value) => {\r\n            if(value !== TransactionProperties.CREATION_DATE) {\r\n                return <th key={value} >{t('transactions.' + value)}</th>;\r\n            }\r\n            \r\n        }\r\n        return (\r\n            <tr>\r\n                {Object.values(TransactionProperties).map((value) => readTitle(value))}\r\n                <th key=\"options\" >{t('transactions.options')}</th>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    const readValues = (transaction) => {\r\n        const values = [];\r\n        const getValue = (property) => {\r\n            switch(property) {\r\n                case TransactionProperties.TYPE:\r\n                    return transaction[property] === \"-\" ? t('transactions.types.expense') : t('transactions.types.income');\r\n                case TransactionProperties.CONSTANT:\r\n                    return transaction[property] ? t('transactions.yes') : t('transactions.no');\r\n                case TransactionProperties.PERIOD:\r\n                    return transaction[property] ? t('transactions.periods.' + transaction[property]) : '';\r\n                default:\r\n                    return transaction[property];\r\n            }\r\n        }\r\n        for (const property in TransactionProperties) {\r\n            if(property.toLowerCase() !== TransactionProperties.CREATION_DATE){\r\n                values.push(<td key={property.toLowerCase()}>{getValue(property.toLowerCase())}</td>);\r\n            }\r\n        }\r\n        return values;\r\n    }\r\n\r\n    const readRow = (data) => {\r\n        const remove = (transaction) => {\r\n            const index = data.indexOf(transaction);\r\n            if(index !== -1) {\r\n              dispatch(removeTransaction(index))\r\n            }\r\n        }\r\n        const edit = (transaction) => {\r\n            props.editTransaction(transaction);\r\n        }\r\n        return data.map((transaction) => {\r\n            return (\r\n            <tr key={data.indexOf(transaction)} onClick={() => edit(transaction)}>\r\n                {readValues(transaction)}\r\n                <td key=\"options\">\r\n                    <button className=\"button is-danger\" onClick={() => remove(transaction)}>\r\n                        <i className=\"fas fa-trash\"></i>\r\n                    </button>\r\n                    <button className=\"button is-warning\" onClick={() => edit(transaction)}>\r\n                        <i className=\"fas fa-edit\"></i>\r\n                    </button>\r\n                </td>\r\n            </tr>);\r\n        })\r\n    }\r\n\r\n    const createTable = (data) => {\r\n        return (\r\n            <table className=\"table is-bordered is-striped is-narrow is-hoverable is-fullwidth\">\r\n                <thead>\r\n                    {getTitles()}\r\n                </thead>\r\n                <tbody>\r\n                    {readRow(data)}\r\n                </tbody>\r\n            </table>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {(props.transactions.length > 0) && createTable(props.transactions)}\r\n        </div>\r\n        \r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport CSVReader from 'react-csv-reader'\r\nimport { updateTransactions } from '../transactions/transactionsSlice';\r\nimport { CSVLink } from \"react-csv\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport function BudgetNavbar(props) {\r\n    const {t, i18n} = useTranslation('common');\r\n    const dispatch = useDispatch();\r\n    const [fileName, setFileName] = useState('');\r\n\r\n    const parseOptions = {\r\n        header: true,\r\n        dynamicTyping: true,\r\n        skipEmptyLines: true,\r\n        transformHeader: header =>\r\n          header\r\n            .toLowerCase()\r\n            .replace(/\\W/g, '_')\r\n    }\r\n\r\n    const onTransactionsFileLoaded = (data, fileInfo) => {\r\n        dispatch(updateTransactions(data));\r\n        setFileName(fileInfo['name']);\r\n    }\r\n\r\n    const clearTransactionsData = () => {\r\n        dispatch(updateTransactions([]));\r\n        setFileName('');\r\n    }\r\n\r\n    const getLanguageToChange = () => {\r\n        return i18n.language === \"en\" ? \"pl\" : \"en\";\r\n    }\r\n\r\n    const addNewTransaction = () => {\r\n        props.addNewTransaction();\r\n    }\r\n\r\n    return (\r\n        <nav className=\"level navbar container is-fluid\">\r\n            <div className=\"level-left\">\r\n                <p className=\"title\">{t('app.title')}</p>\r\n            </div>\r\n            <div className=\"level-right\">\r\n                <div className=\"level-item\">\r\n                    <button className=\"button is-info is-light\" onClick={addNewTransaction}>{t('buttons.new_transaction')}</button>\r\n                </div>\r\n                <div className=\"level-item\">\r\n                        <CSVReader \r\n                            label={fileName ? fileName : t('buttons.select_csv_file')}\r\n                            cssClass=\"button is-primary is-light\"\r\n                            cssInputClass=\"file-input\"\r\n                            cssLabelClass=\"file-label\"\r\n                            parserOptions={parseOptions} \r\n                            onFileLoaded={onTransactionsFileLoaded} \r\n                        />\r\n                </div>\r\n                <div className=\"level-item\">\r\n                    <CSVLink filename={\"home-budget.csv\"} className=\"button is-success is-light\" data={props.transactions}>\r\n                        <span className=\"icon is-small\">\r\n                            <i className=\"fas fa-check\"></i>\r\n                        </span>\r\n                        <span>\r\n                            {t('buttons.save')}\r\n                        </span>\r\n                    </CSVLink>\r\n                </div>\r\n                <div className=\"level-item\">\r\n                    <button className=\"button is-danger is-light\" onClick={clearTransactionsData}>{t('buttons.clear')}</button>\r\n                </div>\r\n                <div className=\"level-item\">\r\n                    <button className=\"button is-dark is-inverted\" onClick={() => i18n.changeLanguage(getLanguageToChange())}>{getLanguageToChange()}</button>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport bulmaCalendar from 'bulma-calendar/dist/js/bulma-calendar.min';\r\nimport { useForm } from \"react-hook-form\";\r\nimport './TransactionForm.scss';\r\nimport { addTransaction, editTransaction, selectCategoryList } from '../transactions/transactionsSlice';\r\nimport { TransactionProperties, TransactionEntity } from '../transactions/transactionModel';\r\n\r\nexport function TransactionForm(props) {\r\n    const {t, i18n} = useTranslation('common');\r\n    const [isCustomCategory, setIsCustomCategory] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const categoryList = useSelector(selectCategoryList);\r\n\r\n    const defaultTransaction = () => {\r\n        return props.transaction ? props.transaction : {}\r\n    }\r\n\r\n    const { handleSubmit, register, getValues, errors } = useForm({\r\n        mode: \"onBlur\",\r\n        reValidateMode: 'onChange',\r\n        defaultValues: {\r\n            ...defaultTransaction(),\r\n            date: \"11/11/2020\"\r\n        } \r\n    });\r\n\r\n    const onSubmit = values => {\r\n        const entity = new TransactionEntity();\r\n        entity.setBasedOnFormData(values, isCustomCategory);\r\n\r\n        if(!props.isEdit) {\r\n            const formData = {\r\n                ...entity,\r\n                creation_date: new Date().toString()\r\n            }\r\n            dispatch(addTransaction(formData));\r\n        } else {\r\n            const payload = {\r\n                transaction: {\r\n                    ...entity\r\n                },\r\n                index: props.indexOfTransaction\r\n            }\r\n            dispatch(editTransaction(payload));\r\n        }\r\n        props.onClose();\r\n    }\r\n\r\n    useEffect(() => {\r\n        const calendars = bulmaCalendar.attach('[type=\"date\"]', {\r\n            displayMode: 'dialog',\r\n            showFooter: false,\r\n            showHeader: false,\r\n            color: \"info\",\r\n            showClearButton: false,\r\n            startDate: new Date(),\r\n            dateFormat: \"DD/MM/YYYY\",\r\n            lang: i18n.language\r\n        });\r\n    \r\n        calendars.forEach((calendar) => {\r\n          calendar.on('select', (date) => {\r\n            // console.log(\"date\", date);\r\n          });\r\n        });\r\n    \r\n        const element = document.querySelector('#transaction-date');\r\n        if (element) {\r\n          element.bulmaCalendar.on('select', (datepicker) => {\r\n            datepicker.data.hide();\r\n          });\r\n        }\r\n      }, []);\r\n\r\n    const categoryOptionsChanged = (e) => {\r\n        setIsCustomCategory(e.target.selectedIndex === e.target.length-1);\r\n    };  \r\n    \r\n    const renderCategoryList = () => {\r\n        if(categoryList.length > 0) {\r\n            const categoryListOptions = [...categoryList, t('transactions.otherType')]\r\n            return(\r\n                <div>\r\n                    <div className=\"select is-info\">\r\n                        <select name={TransactionProperties.CATEGORY} ref={register} onChange={categoryOptionsChanged}>\r\n                            {categoryListOptions.map(category => <option key={categoryListOptions.indexOf(category)} value={category}>{category}</option>)}\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"control\">\r\n                        <input className=\"input is-info\" name=\"otherCategory\" type={isCustomCategory ? 'text' : 'hidden'} ref={register} placeholder={t('transactions.otherType')}/>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return(\r\n                <div className=\"control\">\r\n                    <input name={TransactionProperties.CATEGORY}\r\n                        ref={register({\r\n                            required: \"Required\"\r\n                        })} \r\n                        className={\"input \" + (errors.amount && \"is-danger\")}\r\n                        type=\"text\" \r\n                        placeholder={t('transactions.category')}/>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal is-active\">\r\n            <div className=\"modal-background\" onClick={() => props.onClose()}></div>\r\n            <form className=\"modal-card\" onSubmit={handleSubmit(onSubmit)}>\r\n                <header className=\"modal-card-head\">\r\n                    <p className=\"modal-card-title\">{ props.isEdit ? t('buttons.edit_transaction') : t('buttons.new_transaction')}</p>\r\n                    <button className=\"delete\" aria-label=\"close\" onClick={() => props.onClose()}></button>\r\n                </header>\r\n                <section className=\"modal-card-body\">\r\n                    <div className=\"field is-horizontal\">\r\n                        <div className=\"field-label\">\r\n                            <label className=\"label\">{t('transactions.date')}</label>\r\n                        </div>\r\n                        <div className=\"field-body\">\r\n                            <div className=\"field\">\r\n                                <div className=\"control\">\r\n                                    <input id=\"transaction-date\" name={TransactionProperties.DATE} ref={register} className=\"input\" type=\"date\"/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"field is-horizontal\">\r\n                        <div className=\"field-label\">\r\n                            <label className=\"label\">{t('transactions.type')}</label>\r\n                        </div>\r\n                        <div className=\"field-body\">\r\n                            <div className=\"field\">\r\n                                <div className=\"select is-info\">\r\n                                    <select name={TransactionProperties.TYPE} ref={register}>\r\n                                        <option key=\"expense\" value=\"-\">{t('transactions.types.expense')}</option>\r\n                                        <option key=\"income\" value=\"+\">{t('transactions.types.income')}</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"field is-horizontal\">\r\n                        <div className=\"field-label\">\r\n                            <label className=\"label\">{t('transactions.category')}</label>\r\n                        </div>\r\n                        <div className=\"field-body\">\r\n                            <div className=\"field\">\r\n                                {renderCategoryList()}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"field is-horizontal\">\r\n                        <div className=\"field-label\">\r\n                            <label className=\"label\">{t('transactions.amount')}</label>\r\n                        </div>\r\n                        <div className=\"field-body\">\r\n                            <div className=\"field has-addons\">\r\n                                <div className=\"control\">\r\n                                    <input name={TransactionProperties.AMOUNT}\r\n                                        ref={register({\r\n                                            required: \"Required\",\r\n                                            validate: value => parseFloat(value) > 0 || \"Nice try!\"\r\n                                        })} \r\n                                        className={\"input \" + (errors.amount && \"is-danger\")}\r\n                                        type=\"text\" \r\n                                        placeholder=\"0\"/>\r\n                                </div>\r\n                                <div className=\"control\">\r\n                                    <input name={TransactionProperties.CURRENCY} ref={register} placeholder=\"PLN\" className=\"button is-static\" value=\"PLN\" readOnly/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"field is-horizontal\">\r\n                        <div className=\"field-label\">\r\n                            <label className=\"label\">{t('transactions.constant')}</label>\r\n                        </div>\r\n                        <div className=\"field-body\">\r\n                            <div className=\"field\">\r\n                                <div className=\"control\">\r\n                                    <input name={TransactionProperties.CONSTANT} ref={register} type=\"checkbox\"/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"field is-horizontal\">\r\n                        <div className=\"field-label\">\r\n                            <label className=\"label\">{t('transactions.period')}</label>\r\n                        </div>\r\n                        <div className=\"field-body\">\r\n                            <div className=\"field\">\r\n                                <div className=\"select is-info is-static\">\r\n                                    <select className=\"is-static\" name={TransactionProperties.PERIOD} ref={register}>\r\n                                        <option key=\"month\" value=\"month\">{t('transactions.periods.month')}</option>\r\n                                        <option key=\"day\" value=\"day\">{t('transactions.periods.day')}</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"field is-horizontal\">\r\n                        <div className=\"field-label\">\r\n                            <label className=\"label\">{t('transactions.unexpected')}</label>\r\n                        </div>\r\n                        <div className=\"field-body\">\r\n                            <div className=\"field\">\r\n                                <div className=\"control\">\r\n                                    <input name={TransactionProperties.UNEXPECTED} ref={register} type=\"checkbox\"/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"field is-horizontal\">\r\n                        <div className=\"field-label\">\r\n                            <label className=\"label\">{t('transactions.comment')}</label>\r\n                        </div>\r\n                        <div className=\"field-body\">\r\n                            <div className=\"field\">\r\n                            <div className=\"control\">\r\n                                <textarea name={TransactionProperties.COMMENT} ref={register} className=\"textarea\" placeholder={t('transactions.comment')}></textarea>\r\n                            </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <footer className=\"modal-card-foot\">\r\n                    <button type=\"submit\" className=\"button is-success\">{t(\"buttons.save\")}</button>\r\n                    <button className=\"button\" onClick={() => props.onClose()}>{t(\"buttons.cancel\")}</button>\r\n                </footer>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Budget } from './Budget';\r\nimport { BudgetNavbar } from './BudgetNavbar';\r\nimport { TransactionForm } from './TransactionForm';\r\nimport { selectEntries } from '../transactions/transactionsSlice';\r\n\r\nexport function HomeBudget() {\r\n    const [transactionFormOpen, setTransactionFormOpen] = useState(false);\r\n    const [editedTransaction, setEditedTransaction] = useState(null);\r\n    const transactions = useSelector(selectEntries)\r\n\r\n    const showTransactionForm = (transaction = null) => {\r\n        setTransactionFormOpen(true);\r\n        setEditedTransaction(transaction);\r\n    }\r\n\r\n    const hideTransactionForm = () => {\r\n        setTransactionFormOpen(false);\r\n        setEditedTransaction(null);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <BudgetNavbar \r\n                transactions={transactions} \r\n                addNewTransaction={() => showTransactionForm()} />\r\n            <Budget \r\n                transactions={transactions} \r\n                editTransaction={(transaction) => showTransactionForm(transaction)} />\r\n            {transactionFormOpen && \r\n                <TransactionForm \r\n                    isEdit={!!editedTransaction} \r\n                    transaction={editedTransaction} \r\n                    indexOfTransaction={transactions.indexOf(editedTransaction)} \r\n                    onClose={() => hideTransactionForm()} /> }\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './App.scss';\r\nimport 'react-bulma-components/dist/react-bulma-components.min.css';\r\nimport \"bulma-calendar/dist/css/bulma-calendar.min.css\"\r\nimport { HomeBudget } from './features/budget/HomeBudget'\r\n\r\nfunction App() {\r\n  return (\r\n    <section className=\"\">\r\n      <HomeBudget />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport transactionsReducer from '../features/transactions/transactionsSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    transactions: transactionsReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {I18nextProvider} from \"react-i18next\";\r\nimport i18next from \"i18next\";\r\nimport common_pl from \"./translations/pl/common.json\";\r\nimport common_en from \"./translations/en/common.json\";\r\n\r\ni18next.init({\r\n    interpolation: { escapeValue: false },\r\n    lng: 'pl',                              \r\n    resources: {\r\n        pl: {\r\n            common: common_pl              \r\n        },\r\n        en: {\r\n            common: common_en\r\n        }\r\n    },\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <I18nextProvider i18n={i18next}>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </I18nextProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}